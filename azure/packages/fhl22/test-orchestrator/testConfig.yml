 title: Simple container traffic
 description: In this scenario we create a container, run some traffic on it and validate outcome.
 env:
    schema:
      initialObjects:
        key1: SharedMap
        key2: SharedMap
 stages:
  - task-1:
    id: 1
    name: Create azure client
    package: azureFactory
    params:
      type: local
      endpoint: http://localhost:7070
      userId: SomeUserId;
      userName: SomeName;
    out: $(client1)
  - task-2:
    id: 2
    name: Create container
    package: containerFactory
    params:
      client: $(client1)
      schema: ${schema}
    out: $(container1)
  - task-3:
    id: 3
    name: Create traffic
    package: containerTrafficRunner
    params:
      client: $(client1)
      docId: $(container1)
      schema: ${schema}
      actions:
      - action1:
        action: set
        target: key1
        key: a
        value: test1
      - action2:
        action: set
        target: key2
        key: b
        value: test2
      flushAfterAction: true
      flushAfterRun: true
  - task-4:
    id: 4
    name: Delay for 5 secs
    package: "ticker"
    params:
      totalTicks: 5
      msBetweenTicks: 1000
      msgOnTick: "I am ticking every 1000ms"
      msgEndTicking: "I done ticking"
  - task-5:
    id: 5
    name: Validate traffic
    package: containerTrafficValidator
    params:
      client: $(client1)
      docId: $(container1)
      schema: ${schema}
      actions:
      - action1:
        action: get
        target: key1
        key: a
        expectedVal: test1
      - action2:
        action: get
        target: key2
        key: b
        expectedVal: test2
